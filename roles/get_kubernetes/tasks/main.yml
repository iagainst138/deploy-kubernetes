---

- name: create package dir
  file: path={{ package_dir }} state=directory


- name: check for etcd binaries
  stat: path={{ package_dir }}/etcd-v3.0.1-linux-amd64/etcd
  register: etcd

# TODO store etcd name in variable
- name: get etcd
  get_url: url=https://github.com/coreos/etcd/releases/download/v3.0.1/etcd-v3.0.1-linux-amd64.tar.gz dest={{ package_dir }}/etcd-v3.0.1-linux-amd64.tar.gz
  when: etcd.stat.exists == False

- name: extract etcd
  unarchive: src={{ package_dir }}/etcd-v3.0.1-linux-amd64.tar.gz dest={{ package_dir }}
  when: etcd.stat.exists == False


- name: check for kubectl
  stat: path={{ package_dir }}/kubectl
  register: kubectl

- name: get kubectl
  get_url: url={{ kubectl_url }} dest={{ package_dir }}/kubectl
  when: kubectl.stat.exists == False


- name: check for kube api server
  stat: path={{ package_dir }}/kube-apiserver
  register: kube_apiserver

- name: get kube api server
  get_url: url={{ kube_apiserver_url }} dest={{ package_dir }}/kube-apiserver
  when: kube_apiserver.stat.exists == False


- name: check for kubelet
  stat: path={{ package_dir }}/kubelet
  register: kubelet

- name: get kubelet
  get_url: url={{ kubelet_url }} dest={{ package_dir }}/kubelet
  when: kubelet.stat.exists == False


- name: check for kube controller
  stat: path={{ package_dir }}/kube-controller-manager
  register: kube_controller_manager

- name: get kube controller manager
  get_url: url={{ kube_controller_manager_url }} dest={{ package_dir }}/kube-controller-manager
  when: kube_controller_manager.stat.exists == False


- name: check for kube proxy
  stat: path={{ package_dir }}/kube-proxy
  register: kube_proxy

- name: get kube proxy
  get_url: url={{ kube_proxy_url }} dest={{ package_dir }}/kube-proxy
  when: kube_proxy.stat.exists == False


- name: check for kube scheduler
  stat: path={{ package_dir }}/kube-scheduler
  register: kube_scheduler

- name: get kube scheduler
  get_url: url={{ kube_scheduler_url }} dest={{ package_dir }}/kube-scheduler
  when: kube_scheduler.stat.exists == False


- name: check for cni
  stat: path={{ package_dir }}/cni.tar.gz
  register: cni

- name: get cni
  get_url: url={{ cni_url }} dest={{ package_dir }}/cni.tar.gz
  when: cni.stat.exists == False
